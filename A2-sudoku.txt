String screen = "menu";
int selectedRow = -1;
int selectedCol = -1;
int[][] grid = new int[9][9];
boolean gameWon= false;


void setup(){
  size(400,400);
  textAlign(CENTER,CENTER);
  textSize(20);
  generateFullGrid();
  removeNumbers(1);
}


void draw(){
  background(255);
  if(screen=="menu"){
    drawMenu();
  }
  else if(screen.equals("play")){
    drawGrid();
    if (gameWon){
      background(0);
      fill(255,255,0);
      textSize(30);
      text("YOU WIN!" , width/2,height/2);
    }
  }
}


void drawMenu(){
  fill(100, 200, 100);
  rect(150, 100, 100, 50);
  fill(0);
  textAlign(CENTER, CENTER);
  text("Play", 200, 125);

  fill(100, 100, 200);
  rect(150, 170, 100, 50);
  fill(0);
  text("Load", 200, 195);

  fill(200, 100, 100);
  rect(150, 240, 100, 50);
  fill(0);
  text("Exit", 200, 265);
}


void drawGrid(){
  int gridSize=40;
  int offset=20;
  
  int i = 0;
  int j;
  
  
  while (i < 9){
    j = 0;
    while(j<9){
      stroke(0);
      strokeWeight(1);
      fill(255);
      rect(offset+i*gridSize,offset+j*gridSize,gridSize,gridSize);
      
      
      if (grid[i][j] != 0 ){
        fill(0);
        text(grid[i][j],offset + i * gridSize + gridSize /2 , offset + j * gridSize + gridSize/2);
        
      }
      if (i == selectedRow && j == selectedCol) {
        stroke(0, 255, 0);
        strokeWeight(3);
        noFill();
        rect(offset + i * gridSize, offset + j * gridSize, gridSize, gridSize);
      }
      j++;
    }
    i++;
  }
  
  
  i = 0;
  strokeWeight(3);
  while (i<=9){
    if (i%3==0){
      line(offset + i * gridSize, offset, offset +i * gridSize, offset + 9 * gridSize);  
      line(offset, offset + i * gridSize, offset + 9 * gridSize, offset + i* gridSize);
      
    }
    i++;
  }
  
  
  strokeWeight(6);
  noFill();
  rect(offset,offset,9*gridSize,9*gridSize);
}


void mousePressed(){
  if (screen.equals("menu")) {
    
    if (mouseX > 150 && mouseX < 250 && mouseY > 100 && mouseY < 150) {
      screen = "play";  
    }
    
    else if (mouseX > 150 && mouseX < 250 && mouseY > 240 && mouseY < 290) {
      exit();
    }
  }
  else if(screen.equals("play")){
    int gridSize = 40;
    int offset = 20;
    
    if (mouseX > offset && mouseX < offset + 9 * gridSize && mouseY > offset && mouseY < offset + 9*gridSize){
       selectedRow = (mouseX - offset) / gridSize;
       selectedCol = (mouseY - offset) / gridSize;
    }
  }
  
}


void keyPressed(){
  if (screen.equals("play") && selectedRow != -1 && selectedCol != -1){
    if(key>='1' && key <= '9'){
      int num = key-'0';
      if (isValidMove(selectedRow, selectedCol,num)){
        grid[selectedRow][selectedCol] = num;
        if(checkWin()){
          gameWon=true;
        }
      }
      else{
        println("Invalid move");
      }
    }
    else if(key=='s'|| key == 'S'){
    saveGame();
    }
  }
  
}


void generateFullGrid(){
  fillGrid(0,0);
}


boolean fillGrid(int row, int col){
  if (row == 9 ){
    return true;
  }
  if (col == 9 ){
    return fillGrid(row+1,0);
  }
  
  
  int[] nums = {1,2,3,4,5,6,7,8,9};
  
  shuffle(nums);
  
  int index = 0 ;
  while (index < nums.length){
    int num = nums[index];
    if (isValidMove(row,col,num)){
      grid[row][col] = num;
      if (fillGrid(row,col+1)){
        return true;
      }
      grid[row][col]=0;
    }
    index++;
  } 
  return false;
}


void shuffle(int[] arr) {
  
  int i = arr.length-1;
  while ( i > 0 ){
    int j = (int) random(i+1);
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
    i--;
  }
}


void removeNumbers(int count){
  while (count>0){
    int row = (int) random(9);
    int col = (int) random(9);
    if (grid[row][col] != 0 ){
      grid[row][col] = 0;
      count--;
    }
  }
}


boolean checkRow(int row, int num){
  int i = 0;
  while (i < 9){
    if (grid[row][i] == num){
    return false;
    }
    i++;
  }
  return true;
}


boolean checkCol(int col, int num){
  int i = 0;
  while(i<9){
    if(grid[i][col] == num){
      return false;
    }
    i++;
  }
  return true;
}


boolean checkSubGrid(int row, int col, int num){
  int startRow = (row/3)*3;
  int startCol = (col/3)*3;
  
  int i = 0 ;
  
  
  while (i<3){
    int j =0 ;
    while(j<3){
      if(grid[startRow + i][startCol +j] == num){
        return false;
      }
      j++;
    }
    i++;
  }
  return true;
}


boolean isValidMove(int row, int col , int num){
  return checkRow(row,num) && checkCol(col,num) && checkSubGrid(row,col,num);
}


boolean checkWin(){
  int row = 0;
  while(row<9){
    int col = 0;
    while(col<9){
      if(grid[row][col]==0){
        return false;
      }
      col++;
    }
    row++;
  }
  return true;  
}


String[] intArrayToStringArray(int[] arr){
  String[] strArr = new String[arr.length];
  int i = 0 ;
  while (i < arr.length ){
    strArr[i]=str(arr[i]);
    i++;
  }
  return strArr;
}


void saveGame(){
  String[] lines = new String[9];
  int i = 0 ;
  while (i < 9){
    lines[i] = join(intArrayToStringArray(grid[i]),",");
    i++;
  }
  saveStrings("C:/Users/tongy/Documents/Save_Sudoku.txt", lines);
  println("Game Saved");
}


void loadGame() {
  String[] lines = loadStrings("C:/Users/tongy/Documents/sudoku_save.txt");
  for (int i = 0; i < 9; i++) {
    String[] nums = split(lines[i], ",");
    for (int j = 0; j < 9; j++) {
      grid[i][j] = int(nums[j]);
    }
  }
  println("Game Loaded");
}

